module OpenTransit
  module Models
    type arrival_and_departure_list_response =
      { data: OpenTransit::Models::ArrivalAndDepartureListResponse::Data }

    class ArrivalAndDepartureListResponse < OpenTransit::Models::ResponseWrapper
      def data: -> OpenTransit::Models::ArrivalAndDepartureListResponse::Data

      def data=: (
        OpenTransit::Models::ArrivalAndDepartureListResponse::Data _
      ) -> OpenTransit::Models::ArrivalAndDepartureListResponse::Data

      def initialize: (
        data: OpenTransit::Models::ArrivalAndDepartureListResponse::Data
      ) -> void

      type data =
        {
          entry: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry,
          references: OpenTransit::References
        }

      class Data < OpenTransit::Internal::Type::BaseModel
        attr_accessor entry: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry

        attr_accessor references: OpenTransit::References

        def initialize: (
          entry: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry,
          references: OpenTransit::References
        ) -> void

        type entry =
          {
            arrivals_and_departures: ::Array[OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture]
          }

        class Entry < OpenTransit::Internal::Type::BaseModel
          attr_accessor arrivals_and_departures: ::Array[OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture]

          def initialize: (
            arrivals_and_departures: ::Array[OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture]
          ) -> void

          type arrivals_and_departure =
            {
              arrival_enabled: bool,
              block_trip_sequence: Integer,
              departure_enabled: bool,
              number_of_stops_away: Integer,
              predicted_arrival_time: Integer,
              predicted_departure_time: Integer,
              route_id: String,
              scheduled_arrival_time: Integer,
              scheduled_departure_time: Integer,
              service_date: Integer,
              stop_id: String,
              stop_sequence: Integer,
              total_stops_in_trip: Integer,
              trip_headsign: String,
              trip_id: String,
              vehicle_id: String,
              actual_track: String,
              distance_from_stop: Float,
              frequency: String,
              historical_occupancy: String,
              last_update_time: Integer,
              occupancy_status: String,
              predicted: bool,
              predicted_arrival_interval: String,
              predicted_departure_interval: String,
              predicted_occupancy: String,
              route_long_name: String,
              route_short_name: String,
              scheduled_arrival_interval: String,
              scheduled_departure_interval: String,
              scheduled_track: String,
              situation_ids: ::Array[String],
              status: String,
              trip_status: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus
            }

          class ArrivalsAndDeparture < OpenTransit::Internal::Type::BaseModel
            attr_accessor arrival_enabled: bool

            attr_accessor block_trip_sequence: Integer

            attr_accessor departure_enabled: bool

            attr_accessor number_of_stops_away: Integer

            attr_accessor predicted_arrival_time: Integer

            attr_accessor predicted_departure_time: Integer

            attr_accessor route_id: String

            attr_accessor scheduled_arrival_time: Integer

            attr_accessor scheduled_departure_time: Integer

            attr_accessor service_date: Integer

            attr_accessor stop_id: String

            attr_accessor stop_sequence: Integer

            attr_accessor total_stops_in_trip: Integer

            attr_accessor trip_headsign: String

            attr_accessor trip_id: String

            attr_accessor vehicle_id: String

            attr_reader actual_track: String?

            def actual_track=: (String) -> String

            attr_reader distance_from_stop: Float?

            def distance_from_stop=: (Float) -> Float

            attr_reader frequency: String?

            def frequency=: (String) -> String

            attr_reader historical_occupancy: String?

            def historical_occupancy=: (String) -> String

            attr_reader last_update_time: Integer?

            def last_update_time=: (Integer) -> Integer

            attr_reader occupancy_status: String?

            def occupancy_status=: (String) -> String

            attr_reader predicted: bool?

            def predicted=: (bool) -> bool

            attr_reader predicted_arrival_interval: String?

            def predicted_arrival_interval=: (String) -> String

            attr_reader predicted_departure_interval: String?

            def predicted_departure_interval=: (String) -> String

            attr_reader predicted_occupancy: String?

            def predicted_occupancy=: (String) -> String

            attr_reader route_long_name: String?

            def route_long_name=: (String) -> String

            attr_reader route_short_name: String?

            def route_short_name=: (String) -> String

            attr_reader scheduled_arrival_interval: String?

            def scheduled_arrival_interval=: (String) -> String

            attr_reader scheduled_departure_interval: String?

            def scheduled_departure_interval=: (String) -> String

            attr_reader scheduled_track: String?

            def scheduled_track=: (String) -> String

            attr_reader situation_ids: ::Array[String]?

            def situation_ids=: (::Array[String]) -> ::Array[String]

            attr_reader status: String?

            def status=: (String) -> String

            attr_reader trip_status: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus?

            def trip_status=: (
              OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus
            ) -> OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus

            def initialize: (
              arrival_enabled: bool,
              block_trip_sequence: Integer,
              departure_enabled: bool,
              number_of_stops_away: Integer,
              predicted_arrival_time: Integer,
              predicted_departure_time: Integer,
              route_id: String,
              scheduled_arrival_time: Integer,
              scheduled_departure_time: Integer,
              service_date: Integer,
              stop_id: String,
              stop_sequence: Integer,
              total_stops_in_trip: Integer,
              trip_headsign: String,
              trip_id: String,
              vehicle_id: String,
              ?actual_track: String,
              ?distance_from_stop: Float,
              ?frequency: String,
              ?historical_occupancy: String,
              ?last_update_time: Integer,
              ?occupancy_status: String,
              ?predicted: bool,
              ?predicted_arrival_interval: String,
              ?predicted_departure_interval: String,
              ?predicted_occupancy: String,
              ?route_long_name: String,
              ?route_short_name: String,
              ?scheduled_arrival_interval: String,
              ?scheduled_departure_interval: String,
              ?scheduled_track: String,
              ?situation_ids: ::Array[String],
              ?status: String,
              ?trip_status: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus
            ) -> void

            type trip_status =
              {
                active_trip_id: String,
                block_trip_sequence: Integer,
                closest_stop: String,
                distance_along_trip: Float,
                last_known_distance_along_trip: Float,
                last_location_update_time: Integer,
                last_update_time: Integer,
                occupancy_capacity: Integer,
                occupancy_count: Integer,
                occupancy_status: String,
                phase: String,
                predicted: bool,
                schedule_deviation: Integer,
                service_date: Integer,
                status: String,
                total_distance_along_trip: Float,
                closest_stop_time_offset: Integer,
                frequency: String,
                last_known_location: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::LastKnownLocation,
                last_known_orientation: Float,
                next_stop: String,
                next_stop_time_offset: Integer,
                orientation: Float,
                position: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::Position,
                scheduled_distance_along_trip: Float,
                situation_ids: ::Array[String],
                vehicle_id: String
              }

            class TripStatus < OpenTransit::Internal::Type::BaseModel
              attr_accessor active_trip_id: String

              attr_accessor block_trip_sequence: Integer

              attr_accessor closest_stop: String

              attr_accessor distance_along_trip: Float

              attr_accessor last_known_distance_along_trip: Float

              attr_accessor last_location_update_time: Integer

              attr_accessor last_update_time: Integer

              attr_accessor occupancy_capacity: Integer

              attr_accessor occupancy_count: Integer

              attr_accessor occupancy_status: String

              attr_accessor phase: String

              attr_accessor predicted: bool

              attr_accessor schedule_deviation: Integer

              attr_accessor service_date: Integer

              attr_accessor status: String

              attr_accessor total_distance_along_trip: Float

              attr_reader closest_stop_time_offset: Integer?

              def closest_stop_time_offset=: (Integer) -> Integer

              attr_reader frequency: String?

              def frequency=: (String) -> String

              attr_reader last_known_location: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::LastKnownLocation?

              def last_known_location=: (
                OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::LastKnownLocation
              ) -> OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::LastKnownLocation

              attr_reader last_known_orientation: Float?

              def last_known_orientation=: (Float) -> Float

              attr_reader next_stop: String?

              def next_stop=: (String) -> String

              attr_reader next_stop_time_offset: Integer?

              def next_stop_time_offset=: (Integer) -> Integer

              attr_reader orientation: Float?

              def orientation=: (Float) -> Float

              attr_reader position: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::Position?

              def position=: (
                OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::Position
              ) -> OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::Position

              attr_reader scheduled_distance_along_trip: Float?

              def scheduled_distance_along_trip=: (Float) -> Float

              attr_reader situation_ids: ::Array[String]?

              def situation_ids=: (::Array[String]) -> ::Array[String]

              attr_reader vehicle_id: String?

              def vehicle_id=: (String) -> String

              def initialize: (
                active_trip_id: String,
                block_trip_sequence: Integer,
                closest_stop: String,
                distance_along_trip: Float,
                last_known_distance_along_trip: Float,
                last_location_update_time: Integer,
                last_update_time: Integer,
                occupancy_capacity: Integer,
                occupancy_count: Integer,
                occupancy_status: String,
                phase: String,
                predicted: bool,
                schedule_deviation: Integer,
                service_date: Integer,
                status: String,
                total_distance_along_trip: Float,
                ?closest_stop_time_offset: Integer,
                ?frequency: String,
                ?last_known_location: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::LastKnownLocation,
                ?last_known_orientation: Float,
                ?next_stop: String,
                ?next_stop_time_offset: Integer,
                ?orientation: Float,
                ?position: OpenTransit::Models::ArrivalAndDepartureListResponse::Data::Entry::ArrivalsAndDeparture::TripStatus::Position,
                ?scheduled_distance_along_trip: Float,
                ?situation_ids: ::Array[String],
                ?vehicle_id: String
              ) -> void

              type last_known_location = { lat: Float, lon: Float }

              class LastKnownLocation < OpenTransit::Internal::Type::BaseModel
                attr_reader lat: Float?

                def lat=: (Float) -> Float

                attr_reader lon: Float?

                def lon=: (Float) -> Float

                def initialize: (?lat: Float, ?lon: Float) -> void
              end

              type position = { lat: Float, lon: Float }

              class Position < OpenTransit::Internal::Type::BaseModel
                attr_reader lat: Float?

                def lat=: (Float) -> Float

                attr_reader lon: Float?

                def lon=: (Float) -> Float

                def initialize: (?lat: Float, ?lon: Float) -> void
              end
            end
          end
        end
      end
    end
  end
end
