module OpenTransit
  module Models
    type trip_detail_retrieve_response =
      { data: OpenTransit::Models::TripDetailRetrieveResponse::Data }

    class TripDetailRetrieveResponse < OpenTransit::Models::ResponseWrapper
      def data: -> OpenTransit::Models::TripDetailRetrieveResponse::Data

      def data=: (
        OpenTransit::Models::TripDetailRetrieveResponse::Data _
      ) -> OpenTransit::Models::TripDetailRetrieveResponse::Data

      def initialize: (
        data: OpenTransit::Models::TripDetailRetrieveResponse::Data
      ) -> void

      type data =
        {
          entry: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry,
          references: OpenTransit::References
        }

      class Data < OpenTransit::Internal::Type::BaseModel
        attr_accessor entry: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry

        attr_accessor references: OpenTransit::References

        def initialize: (
          entry: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry,
          references: OpenTransit::References
        ) -> void

        type entry =
          {
            trip_id: String,
            frequency: String?,
            schedule: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule,
            service_date: Integer,
            situation_ids: ::Array[String],
            status: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status
          }

        class Entry < OpenTransit::Internal::Type::BaseModel
          attr_accessor trip_id: String

          attr_accessor frequency: String?

          attr_reader schedule: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule?

          def schedule=: (
            OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule
          ) -> OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule

          attr_reader service_date: Integer?

          def service_date=: (Integer) -> Integer

          attr_reader situation_ids: ::Array[String]?

          def situation_ids=: (::Array[String]) -> ::Array[String]

          attr_reader status: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status?

          def status=: (
            OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status
          ) -> OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status

          def initialize: (
            trip_id: String,
            ?frequency: String?,
            ?schedule: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule,
            ?service_date: Integer,
            ?situation_ids: ::Array[String],
            ?status: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status
          ) -> void

          type schedule =
            {
              next_trip_id: String,
              previous_trip_id: String,
              stop_times: ::Array[OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule::StopTime],
              time_zone: String,
              frequency: String?
            }

          class Schedule < OpenTransit::Internal::Type::BaseModel
            attr_accessor next_trip_id: String

            attr_accessor previous_trip_id: String

            attr_accessor stop_times: ::Array[OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule::StopTime]

            attr_accessor time_zone: String

            attr_accessor frequency: String?

            def initialize: (
              next_trip_id: String,
              previous_trip_id: String,
              stop_times: ::Array[OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Schedule::StopTime],
              time_zone: String,
              ?frequency: String?
            ) -> void

            type stop_time =
              {
                arrival_time: Integer,
                departure_time: Integer,
                distance_along_trip: Float,
                historical_occupancy: String,
                stop_headsign: String,
                stop_id: String
              }

            class StopTime < OpenTransit::Internal::Type::BaseModel
              attr_reader arrival_time: Integer?

              def arrival_time=: (Integer) -> Integer

              attr_reader departure_time: Integer?

              def departure_time=: (Integer) -> Integer

              attr_reader distance_along_trip: Float?

              def distance_along_trip=: (Float) -> Float

              attr_reader historical_occupancy: String?

              def historical_occupancy=: (String) -> String

              attr_reader stop_headsign: String?

              def stop_headsign=: (String) -> String

              attr_reader stop_id: String?

              def stop_id=: (String) -> String

              def initialize: (
                ?arrival_time: Integer,
                ?departure_time: Integer,
                ?distance_along_trip: Float,
                ?historical_occupancy: String,
                ?stop_headsign: String,
                ?stop_id: String
              ) -> void
            end
          end

          type status =
            {
              active_trip_id: String,
              block_trip_sequence: Integer,
              closest_stop: String,
              distance_along_trip: Float,
              last_known_distance_along_trip: Float,
              last_location_update_time: Integer,
              last_update_time: Integer,
              occupancy_capacity: Integer,
              occupancy_count: Integer,
              occupancy_status: String,
              phase: String,
              predicted: bool,
              schedule_deviation: Integer,
              service_date: Integer,
              status: String,
              total_distance_along_trip: Float,
              closest_stop_time_offset: Integer,
              frequency: String,
              last_known_location: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::LastKnownLocation,
              last_known_orientation: Float,
              next_stop: String,
              next_stop_time_offset: Integer,
              orientation: Float,
              position: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::Position,
              scheduled_distance_along_trip: Float,
              situation_ids: ::Array[String],
              vehicle_id: String
            }

          class Status < OpenTransit::Internal::Type::BaseModel
            attr_accessor active_trip_id: String

            attr_accessor block_trip_sequence: Integer

            attr_accessor closest_stop: String

            attr_accessor distance_along_trip: Float

            attr_accessor last_known_distance_along_trip: Float

            attr_accessor last_location_update_time: Integer

            attr_accessor last_update_time: Integer

            attr_accessor occupancy_capacity: Integer

            attr_accessor occupancy_count: Integer

            attr_accessor occupancy_status: String

            attr_accessor phase: String

            attr_accessor predicted: bool

            attr_accessor schedule_deviation: Integer

            attr_accessor service_date: Integer

            attr_accessor status: String

            attr_accessor total_distance_along_trip: Float

            attr_reader closest_stop_time_offset: Integer?

            def closest_stop_time_offset=: (Integer) -> Integer

            attr_reader frequency: String?

            def frequency=: (String) -> String

            attr_reader last_known_location: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::LastKnownLocation?

            def last_known_location=: (
              OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::LastKnownLocation
            ) -> OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::LastKnownLocation

            attr_reader last_known_orientation: Float?

            def last_known_orientation=: (Float) -> Float

            attr_reader next_stop: String?

            def next_stop=: (String) -> String

            attr_reader next_stop_time_offset: Integer?

            def next_stop_time_offset=: (Integer) -> Integer

            attr_reader orientation: Float?

            def orientation=: (Float) -> Float

            attr_reader position: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::Position?

            def position=: (
              OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::Position
            ) -> OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::Position

            attr_reader scheduled_distance_along_trip: Float?

            def scheduled_distance_along_trip=: (Float) -> Float

            attr_reader situation_ids: ::Array[String]?

            def situation_ids=: (::Array[String]) -> ::Array[String]

            attr_reader vehicle_id: String?

            def vehicle_id=: (String) -> String

            def initialize: (
              active_trip_id: String,
              block_trip_sequence: Integer,
              closest_stop: String,
              distance_along_trip: Float,
              last_known_distance_along_trip: Float,
              last_location_update_time: Integer,
              last_update_time: Integer,
              occupancy_capacity: Integer,
              occupancy_count: Integer,
              occupancy_status: String,
              phase: String,
              predicted: bool,
              schedule_deviation: Integer,
              service_date: Integer,
              status: String,
              total_distance_along_trip: Float,
              ?closest_stop_time_offset: Integer,
              ?frequency: String,
              ?last_known_location: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::LastKnownLocation,
              ?last_known_orientation: Float,
              ?next_stop: String,
              ?next_stop_time_offset: Integer,
              ?orientation: Float,
              ?position: OpenTransit::Models::TripDetailRetrieveResponse::Data::Entry::Status::Position,
              ?scheduled_distance_along_trip: Float,
              ?situation_ids: ::Array[String],
              ?vehicle_id: String
            ) -> void

            type last_known_location = { lat: Float, lon: Float }

            class LastKnownLocation < OpenTransit::Internal::Type::BaseModel
              attr_reader lat: Float?

              def lat=: (Float) -> Float

              attr_reader lon: Float?

              def lon=: (Float) -> Float

              def initialize: (?lat: Float, ?lon: Float) -> void
            end

            type position = { lat: Float, lon: Float }

            class Position < OpenTransit::Internal::Type::BaseModel
              attr_reader lat: Float?

              def lat=: (Float) -> Float

              attr_reader lon: Float?

              def lon=: (Float) -> Float

              def initialize: (?lat: Float, ?lon: Float) -> void
            end
          end
        end
      end
    end
  end
end
