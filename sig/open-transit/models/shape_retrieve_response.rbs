module OpenTransit
  module Models
    type shape_retrieve_response =
      { data: OpenTransit::Models::ShapeRetrieveResponse::Data }

    class ShapeRetrieveResponse < OpenTransit::Models::ResponseWrapper
      attr_accessor data: OpenTransit::Models::ShapeRetrieveResponse::Data

      def initialize:
        (data: OpenTransit::Models::ShapeRetrieveResponse::Data) -> void
        | (
          ?OpenTransit::Models::shape_retrieve_response
          | OpenTransit::BaseModel data
        ) -> void

      def to_hash: -> OpenTransit::Models::shape_retrieve_response

      type data =
        {
          entry: OpenTransit::Models::ShapeRetrieveResponse::Data::Entry,
          references: OpenTransit::Models::References
        }

      class Data < OpenTransit::BaseModel
        attr_accessor entry: OpenTransit::Models::ShapeRetrieveResponse::Data::Entry

        attr_accessor references: OpenTransit::Models::References

        def initialize:
          (
            entry: OpenTransit::Models::ShapeRetrieveResponse::Data::Entry,
            references: OpenTransit::Models::References
          ) -> void
          | (
            ?OpenTransit::Models::ShapeRetrieveResponse::data
            | OpenTransit::BaseModel data
          ) -> void

        def to_hash: -> OpenTransit::Models::ShapeRetrieveResponse::data

        type entry = { length: Integer, points: String, levels: String }

        class Entry < OpenTransit::BaseModel
          attr_accessor length: Integer

          attr_accessor points: String

          attr_reader levels: String?

          def levels=: (String) -> void

          def initialize:
            (length: Integer, points: String, levels: String) -> void
            | (
              ?OpenTransit::Models::ShapeRetrieveResponse::Data::entry
              | OpenTransit::BaseModel data
            ) -> void

          def to_hash: -> OpenTransit::Models::ShapeRetrieveResponse::Data::entry
        end
      end
    end
  end
end
