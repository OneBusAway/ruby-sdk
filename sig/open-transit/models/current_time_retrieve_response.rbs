module OpenTransit
  module Models
    type current_time_retrieve_response =
      { data: OpenTransit::Models::CurrentTimeRetrieveResponse::Data }

    class CurrentTimeRetrieveResponse < OpenTransit::Models::ResponseWrapper
      attr_accessor data: OpenTransit::Models::CurrentTimeRetrieveResponse::Data

      def initialize:
        (data: OpenTransit::Models::CurrentTimeRetrieveResponse::Data) -> void
        | (
          ?OpenTransit::Models::current_time_retrieve_response
          | OpenTransit::BaseModel data
        ) -> void

      def to_hash: -> OpenTransit::Models::current_time_retrieve_response

      type data =
        {
          entry: OpenTransit::Models::CurrentTimeRetrieveResponse::Data::Entry,
          references: OpenTransit::Models::References
        }

      class Data < OpenTransit::BaseModel
        attr_accessor entry: OpenTransit::Models::CurrentTimeRetrieveResponse::Data::Entry

        attr_accessor references: OpenTransit::Models::References

        def initialize:
          (
            entry: OpenTransit::Models::CurrentTimeRetrieveResponse::Data::Entry,
            references: OpenTransit::Models::References
          ) -> void
          | (
            ?OpenTransit::Models::CurrentTimeRetrieveResponse::data
            | OpenTransit::BaseModel data
          ) -> void

        def to_hash: -> OpenTransit::Models::CurrentTimeRetrieveResponse::data

        type entry = { readable_time: String, time: Integer }

        class Entry < OpenTransit::BaseModel
          attr_reader readable_time: String?

          def readable_time=: (String) -> void

          attr_reader time: Integer?

          def time=: (Integer) -> void

          def initialize:
            (readable_time: String, time: Integer) -> void
            | (
              ?OpenTransit::Models::CurrentTimeRetrieveResponse::Data::entry
              | OpenTransit::BaseModel data
            ) -> void

          def to_hash: -> OpenTransit::Models::CurrentTimeRetrieveResponse::Data::entry
        end
      end
    end
  end
end
